import pandas as pd

df = pd.read_csv('./data/08_data.csv')

# 【誤ったデータ】
# 「誤ったデータ」とは必ずしも「空のセル」や「誤った形式」を指すわけではなく、
# 単に間違っている場合もあります。例えば誰かが「1.99」ではなく「199」と登録した場合などです。
# データセットを確認することで誤ったデータを見つけられる場合もあります。
# なぜなら、本来あるべき姿に対する期待値があるからです。
# 当社のデータセットを見ると、7行目の継続時間が450となっているのに対し、
# 他の全行では継続時間が30分から60分の間にあることがわかります。
# 必ずしも誤りとは限りませんが、
# これが誰かのワークアウトセッションのデータセットであることを考慮すると、
# この人物が450分間ワークアウトしたわけではないと結論づけられます。

# 【値の置換】
# 誤った値を修正する一つの方法は、それらを別の値に置き換えることです。
# この例では、おそらくタイプミスであり、値は「450」ではなく「45」であるべきです。
# 行7に「45」を挿入するだけで済みます：
# df.loc[7, 'Duration'] = 45
# print(df.to_string())

# 小規模なデータセットであれば誤ったデータを一つずつ置き換えることも可能ですが、
# 大規模なデータセットでは不可能です。
# 大規模なデータセットの誤ったデータを置き換えるには、ルールを作成する方法があります。
# 例えば、許容値の範囲を設定し、その範囲外にある値をすべて置き換えるといった方法です。
# for x in df.index:
#     """
#     「期間」列の全値をループ処理する。
#     値が120より大きい場合、120に設定する
#     """
#     if df.loc[x, "Duration"] > 120:
#         df.loc[x, "Duration"] = 120

# print(df.to_string())

# 【行の削除】
# 誤ったデータを扱う別の方法は、誤ったデータを含む行を削除することです。
# この方法では、それらを何で置き換えるかを考える必要がなく、
# 分析を行う上でそれらが必要ない可能性が高いです。
for x in df.index:
    if df.loc[x, "Duration"] > 120:
        df.drop(x, inplace = True)

print(df.to_string())